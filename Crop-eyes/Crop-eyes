# Per prima cosa installo mediapipe
!pip install mediapipe

# Poi scarico i pacchetti dei modelli. 
# Nella documentazione di MediaPipe vi sono ulteriori informazioni su questi bundle di modelli
!wget -O face_landmarker_v2_with_blendshapes.task -q https://storage.googleapis.com/mediapipe-models/face_landmarker/face_landmarker/float16/1/face_landmarker.task

from mediapipe import solutions
import mediapipe as mp
from mediapipe.framework.formats import landmark_pb2
import numpy as np
import cv2
import matplotlib.pyplot as plt
from google.colab.patches import cv2_imshow  # Questo mi serve per visualizzare l'immagine 
from mediapipe.tasks import python
from mediapipe.tasks.python import vision

# Creo la funzione draw_landmarks_on_image che mi disegna sull'immagine i landmark riconosciuti sull'iride
# La funzione ritorna l'immagine giÃ  con i landmark disegnati
def draw_landmarks_on_image(rgb_image, detection_result):
  face_landmarks_list = detection_result.face_landmarks
  annotated_image = np.copy(rgb_image)

  # Qui si passano in rassegna i volti rilevati nell'immagine per visualizzarli.
  for idx in range(len(face_landmarks_list)):
    face_landmarks = face_landmarks_list[idx]

    # Qui vengono disegnati i landmark sulle iridi
    face_landmarks_proto = landmark_pb2.NormalizedLandmarkList()
    face_landmarks_proto.landmark.extend([ landmark_pb2.NormalizedLandmark(x=landmark.x, y=landmark.y, z=landmark.z) for landmark in face_landmarks ])

    solutions.drawing_utils.draw_landmarks(
        image=annotated_image,
        landmark_list=face_landmarks_proto,
        connections=mp.solutions.face_mesh.FACEMESH_IRISES,
          landmark_drawing_spec=None,
          connection_drawing_spec=mp.solutions.drawing_styles
          .get_default_face_mesh_iris_connections_style())

  return annotated_image

# Importo l'immagine da Google Drive
from google.colab import drive
drive.mount('/content/drive')
image_path = '/content/drive/MyDrive/Tirocinio/frame6.jpg'
img = cv2.imread(image_path)

# Successivamente, inizio con i passaggi per il riconoscimento dei landmark
# Passaggio 1 --> Crea un oggetto FaceLandmarker
base_options = python.BaseOptions(model_asset_path='face_landmarker_v2_with_blendshapes.task')
options = vision.FaceLandmarkerOptions(base_options=base_options,
                                       output_face_blendshapes=True,
                                       output_facial_transformation_matrixes=True,
                                       num_faces=1)
detector = vision.FaceLandmarker.create_from_options(options)

# Passaggio 2 --> Carica una immagine in input
image = mp.Image.create_from_file(image_path)

# Passaggio 3 --> Rileva tutti i punti di riferimento del viso dall'immagine data in input
detection_result = detector.detect(image)

# Passaggio 4 --> Elaborare il risultato del rilevamento, per poi visualizzarlo
annotated_image = draw_landmarks_on_image(image.numpy_view(), detection_result)
cv2_imshow(cv2.cvtColor(annotated_image, cv2.COLOR_RGB2BGR))

# Supponiamo che detection_result.face_landmarks contenga una lista di NormalizedLandmark per gli occhi
face_landmarks = detection_result.face_landmarks[0]

# Estrai le coordinate dei landmark delle iridi per l'occhio sinistro
eye_landmark_left = face_landmarks[:5]

# Estrai le coordinate dei landmark delle iridi per l'occhio destro
eye_landmark_right = face_landmarks[5:10]

# Calcola il punto al centro dell'occhio sinistro usando la punta e l'angolo esterno
eye_left_center_x = (eye_landmark_left[0].x + eye_landmark_left[3].x) / 2
eye_left_center_y = (eye_landmark_left[0].y + eye_landmark_left[3].y) / 2
eye_left_center = (eye_left_center_x, eye_left_center_y)

# Calcola il punto al centro dell'occhio destro usando la punta e l'angolo esterno
eye_right_center_x = (eye_landmark_right[0].x + eye_landmark_right[3].x) / 2
eye_right_center_y = (eye_landmark_right[0].y + eye_landmark_right[3].y) / 2
eye_right_center = (eye_right_center_x, eye_right_center_y)

print("Centro dell'occhio sinistro:", eye_left_center)
print("Centro dell'occhio destro:", eye_right_center)

# Carica l'immagine originale senza landmark
original_image = cv2.imread(image_path)

# Disegna un cerchio o punto sul centro dell'occhio sinistro
cv2.circle(original_image, (int(eye_left_center_x * original_image.shape[1]), int(eye_left_center_y * original_image.shape[0])), 5, (0, 255, 0), -1)

# Disegna un cerchio o punto sul centro dell'occhio destro
cv2.circle(original_image, (int(eye_right_center_x * original_image.shape[1]), int(eye_right_center_y * original_image.shape[0])), 5, (0, 255, 0), -1)

# Visualizza l'immagine con i punti al centro degli occhi evidenziati
cv2_imshow(cv2.cvtColor(original_image, cv2.COLOR_BGR2RGB))

# Dimensioni del rettangolo di ritaglio
larghezza_ritaglio = 50
altezza_ritaglio = 50

# Calcola le coordinate del rettangolo di ritaglio
left = max(0, int(eye_left_center[0] - larghezza_ritaglio // 2))
top = max(0, int(eye_left_center[1] - altezza_ritaglio // 2))
right = min(img.shape[1], int(eye_left_center[0] + larghezza_ritaglio // 2))
bottom = min(img.shape[0], int(eye_left_center[1] + altezza_ritaglio // 2))

# Ritaglia l'immagine utilizzando le coordinate calcolate
immagine_ritagliata = img[top:bottom, left:right]

# Visualizza l'immagine ritagliata con matplotlib
plt.imshow(cv2.cvtColor(immagine_ritagliata, cv2.COLOR_BGR2RGB))
plt.axis('off')  # Nasconde gli assi
plt.show()
